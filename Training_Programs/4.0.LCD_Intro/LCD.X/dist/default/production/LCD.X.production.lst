

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat May 01 19:14:39 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0088                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000D                     	;# 
   185  000E                     	;# 
   186  000E                     	;# 
   187  000F                     	;# 
   188  0010                     	;# 
   189  0011                     	;# 
   190  0012                     	;# 
   191  0013                     	;# 
   192  0014                     	;# 
   193  0015                     	;# 
   194  0015                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001B                     	;# 
   202  001C                     	;# 
   203  001D                     	;# 
   204  001E                     	;# 
   205  001F                     	;# 
   206  0081                     	;# 
   207  0085                     	;# 
   208  0086                     	;# 
   209  0087                     	;# 
   210  0088                     	;# 
   211  0089                     	;# 
   212  008C                     	;# 
   213  008D                     	;# 
   214  008E                     	;# 
   215  0091                     	;# 
   216  0092                     	;# 
   217  0093                     	;# 
   218  0094                     	;# 
   219  0098                     	;# 
   220  0099                     	;# 
   221  009C                     	;# 
   222  009D                     	;# 
   223  009E                     	;# 
   224  009F                     	;# 
   225  010C                     	;# 
   226  010D                     	;# 
   227  010E                     	;# 
   228  010F                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  0008                     _PORTD	set	8
   232  0006                     _PORTB	set	6
   233  0035                     _RB5	set	53
   234  0034                     _RB4	set	52
   235  0088                     _TRISD	set	136
   236  0086                     _TRISB	set	134
   237                           
   238                           	psect	strings
   239  0003                     __pstrings:
   240  0003                     stringtab:
   241  0003                     __stringtab:
   242  0003                     stringcode:	
   243                           ;	String table - string pointers are 1 byte each
   244                           
   245  0003                     stringdir:
   246  0003  3000               	movlw	high stringdir
   247  0004  008A               	movwf	10
   248  0005  0804               	movf	4,w
   249  0006  0A84               	incf	4,f
   250  0007  0782               	addwf	2,f
   251  0008                     __stringbase:
   252  0008  3400               	retlw	0
   253  0009                     __end_of__stringtab:
   254  0009                     STR_1:
   255  0009  3457               	retlw	87	;'W'
   256  000A  3465               	retlw	101	;'e'
   257  000B  346C               	retlw	108	;'l'
   258  000C  3463               	retlw	99	;'c'
   259  000D  346F               	retlw	111	;'o'
   260  000E  346D               	retlw	109	;'m'
   261  000F  3465               	retlw	101	;'e'
   262  0010  3420               	retlw	32	;' '
   263  0011  3474               	retlw	116	;'t'
   264  0012  346F               	retlw	111	;'o'
   265  0013  3420               	retlw	32	;' '
   266  0014  3450               	retlw	80	;'P'
   267  0015  3449               	retlw	73	;'I'
   268  0016  3443               	retlw	67	;'C'
   269  0017  3400               	retlw	0
   270  0018                     STR_2:
   271  0018  3448               	retlw	72	;'H'
   272  0019  3465               	retlw	101	;'e'
   273  001A  346C               	retlw	108	;'l'
   274  001B  346C               	retlw	108	;'l'
   275  001C  346F               	retlw	111	;'o'
   276  001D  3420               	retlw	32	;' '
   277  001E  3442               	retlw	66	;'B'
   278  001F  3449               	retlw	73	;'I'
   279  0020  3454               	retlw	84	;'T'
   280  0021  3453               	retlw	83	;'S'
   281  0022  3400               	retlw	0
   282                           
   283                           	psect	cinit
   284  07FC                     start_initialization:	
   285                           ; #config settings
   286                           
   287  07FC                     __initialization:
   288  07FC                     end_of_initialization:	
   289                           ;End of C runtime variable initialization code
   290                           
   291  07FC                     __end_of__initialization:
   292  07FC  0183               	clrf	3
   293  07FD  120A  118A  2FB8   	ljmp	_main	;jump to C main() function
   294                           
   295                           	psect	cstackCOMMON
   296  0070                     __pcstackCOMMON:
   297  0070                     ?_lcd_init:
   298  0070                     ?_lcd_display:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_lcd_clear:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_lcd_command:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ??_lcd_command:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_main:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_lcd_data:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ??_lcd_data:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 1 bytes @ 0x0
   321  0070                     	ds	2
   322  0072                     lcd_command@com:
   323  0072                     lcd_data@data:	
   324                           ; 1 bytes @ 0x2
   325                           
   326                           
   327                           ; 1 bytes @ 0x2
   328  0072                     	ds	1
   329  0073                     ??_lcd_init:
   330  0073                     ?_lcd_cursor:	
   331                           ; 1 bytes @ 0x3
   332                           
   333  0073                     ??_lcd_display:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     ??_lcd_clear:	
   337                           ; 1 bytes @ 0x3
   338                           
   339  0073                     lcd_cursor@col:	
   340                           ; 1 bytes @ 0x3
   341                           
   342                           
   343                           ; 1 bytes @ 0x3
   344  0073                     	ds	1
   345  0074                     ??_lcd_cursor:
   346  0074                     lcd_cursor@row:	
   347                           ; 1 bytes @ 0x4
   348                           
   349                           
   350                           ; 1 bytes @ 0x4
   351  0074                     	ds	1
   352  0075                     lcd_display@word:
   353                           
   354                           ; 1 bytes @ 0x5
   355  0075                     	ds	1
   356  0076                     ??_main:
   357                           
   358                           ; 1 bytes @ 0x6
   359  0076                     	ds	3
   360                           
   361                           	psect	maintext
   362  07B8                     __pmaintext:	
   363 ;;
   364 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   365 ;;
   366 ;; *************** function _main *****************
   367 ;; Defined at:
   368 ;;		line 16 in file "main.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;		None
   371 ;; Auto vars:     Size  Location     Type
   372 ;;		None
   373 ;; Return value:  Size  Location     Type
   374 ;;                  1    wreg      void 
   375 ;; Registers used:
   376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : B00/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   382 ;;      Params:         0       0       0       0       0
   383 ;;      Locals:         0       0       0       0       0
   384 ;;      Temps:          3       0       0       0       0
   385 ;;      Totals:         3       0       0       0       0
   386 ;;Total ram usage:        3 bytes
   387 ;; Hardware stack levels required when called: 2
   388 ;; This function calls:
   389 ;;		_lcd_clear
   390 ;;		_lcd_cursor
   391 ;;		_lcd_display
   392 ;;		_lcd_init
   393 ;; This function is called by:
   394 ;;		Startup code after reset
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           
   399                           ;psect for function _main
   400  07B8                     _main:
   401  07B8                     l719:	
   402                           ;incstack = 0
   403                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   404                           
   405                           
   406                           ;main.c: 18:  TRISB = 0X00;
   407  07B8  1683               	bsf	3,5	;RP0=1, select bank1
   408  07B9  1303               	bcf	3,6	;RP1=0, select bank1
   409  07BA  0186               	clrf	6	;volatile
   410                           
   411                           ;main.c: 19:  PORTB = 0x00;
   412  07BB  1283               	bcf	3,5	;RP0=0, select bank0
   413  07BC  1303               	bcf	3,6	;RP1=0, select bank0
   414  07BD  0186               	clrf	6	;volatile
   415                           
   416                           ;main.c: 20:  TRISD = 0X00;
   417  07BE  1683               	bsf	3,5	;RP0=1, select bank1
   418  07BF  1303               	bcf	3,6	;RP1=0, select bank1
   419  07C0  0188               	clrf	8	;volatile
   420                           
   421                           ;main.c: 21:  PORTD = 0x00;
   422  07C1  1283               	bcf	3,5	;RP0=0, select bank0
   423  07C2  1303               	bcf	3,6	;RP1=0, select bank0
   424  07C3  0188               	clrf	8	;volatile
   425  07C4                     l721:
   426                           
   427                           ;main.c: 22:  lcd_init();
   428  07C4  120A  118A  2718  120A  118A  	fcall	_lcd_init
   429  07C9                     l723:
   430                           
   431                           ;main.c: 25:   {;main.c: 26:  lcd_cursor(0,0);
   432  07C9  01F3               	clrf	lcd_cursor@col
   433  07CA  3000               	movlw	0
   434  07CB  120A  118A  276B  120A  118A  	fcall	_lcd_cursor
   435  07D0                     l725:
   436                           
   437                           ;main.c: 27:  lcd_display("Welcome to PIC");
   438  07D0  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   439  07D1  120A  118A  2791  120A  118A  	fcall	_lcd_display
   440  07D6                     l727:
   441                           
   442                           ;main.c: 28:  lcd_cursor(1,2);
   443  07D6  3002               	movlw	2
   444  07D7  00F6               	movwf	??_main
   445  07D8  0876               	movf	??_main,w
   446  07D9  00F3               	movwf	lcd_cursor@col
   447  07DA  3001               	movlw	1
   448  07DB  120A  118A  276B  120A  118A  	fcall	_lcd_cursor
   449  07E0                     l729:
   450                           
   451                           ;main.c: 29:     lcd_display("Hello BITS");
   452  07E0  3010               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   453  07E1  120A  118A  2791  120A  118A  	fcall	_lcd_display
   454  07E6                     l731:
   455                           
   456                           ;main.c: 30:  _delay((unsigned long)((1000)*(20000000/4000.0)));
   457  07E6  301A               	movlw	26
   458  07E7  00F8               	movwf	??_main+2
   459  07E8  305E               	movlw	94
   460  07E9  00F7               	movwf	??_main+1
   461  07EA  306E               	movlw	110
   462  07EB  00F6               	movwf	??_main
   463  07EC                     u77:
   464  07EC  0BF6               	decfsz	??_main,f
   465  07ED  2FEC               	goto	u77
   466  07EE  0BF7               	decfsz	??_main+1,f
   467  07EF  2FEC               	goto	u77
   468  07F0  0BF8               	decfsz	??_main+2,f
   469  07F1  2FEC               	goto	u77
   470  07F2  0000               	nop
   471  07F3                     l733:
   472                           
   473                           ;main.c: 31:  lcd_clear();
   474  07F3  120A  118A  2711  120A  118A  	fcall	_lcd_clear
   475  07F8  2FC9               	goto	l723
   476  07F9  120A  118A  2800   	ljmp	start
   477  07FC                     __end_of_main:
   478                           
   479                           	psect	text1
   480  0718                     __ptext1:	
   481 ;; *************** function _lcd_init *****************
   482 ;; Defined at:
   483 ;;		line 35 in file "main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, status,2, status,0, pclath, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   497 ;;      Params:         0       0       0       0       0
   498 ;;      Locals:         0       0       0       0       0
   499 ;;      Temps:          0       0       0       0       0
   500 ;;      Totals:         0       0       0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels used: 1
   503 ;; Hardware stack levels required when called: 1
   504 ;; This function calls:
   505 ;;		_lcd_command
   506 ;; This function is called by:
   507 ;;		_main
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           
   512                           ;psect for function _lcd_init
   513  0718                     _lcd_init:
   514  0718                     l663:	
   515                           ;incstack = 0
   516                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   517                           
   518                           
   519                           ;main.c: 37: lcd_command(0x01);
   520  0718  3001               	movlw	1
   521  0719  120A  118A  2731  120A  118A  	fcall	_lcd_command
   522                           
   523                           ;main.c: 38: lcd_command(0x06);
   524  071E  3006               	movlw	6
   525  071F  120A  118A  2731  120A  118A  	fcall	_lcd_command
   526                           
   527                           ;main.c: 39: lcd_command(0x0c);
   528  0724  300C               	movlw	12
   529  0725  120A  118A  2731  120A  118A  	fcall	_lcd_command
   530                           
   531                           ;main.c: 40: lcd_command(0x38);
   532  072A  3038               	movlw	56
   533  072B  120A  118A  2731  120A  118A  	fcall	_lcd_command
   534  0730                     l35:
   535  0730  0008               	return
   536  0731                     __end_of_lcd_init:
   537                           
   538                           	psect	text2
   539  0791                     __ptext2:	
   540 ;; *************** function _lcd_display *****************
   541 ;; Defined at:
   542 ;;		line 61 in file "main.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;  word            1    wreg     PTR const unsigned char 
   545 ;;		 -> STR_2(11), STR_1(15), 
   546 ;; Auto vars:     Size  Location     Type
   547 ;;  word            1    5[COMMON] PTR const unsigned char 
   548 ;;		 -> STR_2(11), STR_1(15), 
   549 ;; Return value:  Size  Location     Type
   550 ;;                  1    wreg      void 
   551 ;; Registers used:
   552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   558 ;;      Params:         0       0       0       0       0
   559 ;;      Locals:         1       0       0       0       0
   560 ;;      Temps:          2       0       0       0       0
   561 ;;      Totals:         3       0       0       0       0
   562 ;;Total ram usage:        3 bytes
   563 ;; Hardware stack levels used: 1
   564 ;; Hardware stack levels required when called: 1
   565 ;; This function calls:
   566 ;;		_lcd_data
   567 ;; This function is called by:
   568 ;;		_main
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           
   573                           ;psect for function _lcd_display
   574  0791                     _lcd_display:
   575                           
   576                           ;incstack = 0
   577                           ; Regs used in _lcd_display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   578                           ;lcd_display@word stored from wreg
   579  0791  00F5               	movwf	lcd_display@word
   580  0792                     l709:
   581                           
   582                           ;main.c: 61: void lcd_display(const char *word);main.c: 62: {;main.c: 63: while(*word)
   583  0792  2FAB               	goto	l717
   584  0793                     l711:
   585                           
   586                           ;main.c: 64: {;main.c: 65: lcd_data(*word++);
   587  0793  0875               	movf	lcd_display@word,w
   588  0794  0084               	movwf	4
   589  0795  120A  118A  2003  120A  118A  	fcall	stringdir
   590  079A  120A  118A  274E  120A  118A  	fcall	_lcd_data
   591  079F                     l713:
   592  079F  3001               	movlw	1
   593  07A0  00F3               	movwf	??_lcd_display
   594  07A1  0873               	movf	??_lcd_display,w
   595  07A2  07F5               	addwf	lcd_display@word,f
   596  07A3                     l715:
   597                           
   598                           ;main.c: 66: _delay((unsigned long)((1)*(20000000/4000.0)));
   599  07A3  3007               	movlw	7
   600  07A4  00F4               	movwf	??_lcd_display+1
   601  07A5  307D               	movlw	125
   602  07A6  00F3               	movwf	??_lcd_display
   603  07A7                     u87:
   604  07A7  0BF3               	decfsz	??_lcd_display,f
   605  07A8  2FA7               	goto	u87
   606  07A9  0BF4               	decfsz	??_lcd_display+1,f
   607  07AA  2FA7               	goto	u87
   608  07AB                     l717:
   609                           
   610                           ;main.c: 63: while(*word)
   611  07AB  0875               	movf	lcd_display@word,w
   612  07AC  0084               	movwf	4
   613  07AD  120A  118A  2003  120A  118A  	fcall	stringdir
   614  07B2  3A00               	xorlw	0
   615  07B3  1D03               	skipz
   616  07B4  2FB6               	goto	u61
   617  07B5  2FB7               	goto	u60
   618  07B6                     u61:
   619  07B6  2F93               	goto	l711
   620  07B7                     u60:
   621  07B7                     l47:
   622  07B7  0008               	return
   623  07B8                     __end_of_lcd_display:
   624                           
   625                           	psect	text3
   626  074E                     __ptext3:	
   627 ;; *************** function _lcd_data *****************
   628 ;; Defined at:
   629 ;;		line 51 in file "main.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  data            1    wreg     unsigned char 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  data            1    2[COMMON] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   643 ;;      Params:         0       0       0       0       0
   644 ;;      Locals:         1       0       0       0       0
   645 ;;      Temps:          2       0       0       0       0
   646 ;;      Totals:         3       0       0       0       0
   647 ;;Total ram usage:        3 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; This function calls:
   650 ;;		Nothing
   651 ;; This function is called by:
   652 ;;		_lcd_display
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           
   657                           ;psect for function _lcd_data
   658  074E                     _lcd_data:
   659                           
   660                           ;incstack = 0
   661                           ; Regs used in _lcd_data: [wreg]
   662                           ;lcd_data@data stored from wreg
   663  074E  00F2               	movwf	lcd_data@data
   664  074F                     l655:
   665                           
   666                           ;main.c: 51: void lcd_data(unsigned char data);main.c: 52: {;main.c: 53: PORTD=data;
   667  074F  0872               	movf	lcd_data@data,w
   668  0750  1283               	bcf	3,5	;RP0=0, select bank0
   669  0751  1303               	bcf	3,6	;RP1=0, select bank0
   670  0752  0088               	movwf	8	;volatile
   671  0753                     l657:
   672                           
   673                           ;main.c: 54: RB4=1;
   674  0753  1606               	bsf	6,4	;volatile
   675  0754                     l659:
   676                           
   677                           ;main.c: 55: RB5=1;
   678  0754  1686               	bsf	6,5	;volatile
   679                           
   680                           ;main.c: 56: _delay((unsigned long)((10)*(20000000/4000.0)));
   681  0755  3041               	movlw	65
   682  0756  00F1               	movwf	??_lcd_data+1
   683  0757  30EE               	movlw	238
   684  0758  00F0               	movwf	??_lcd_data
   685  0759                     u97:
   686  0759  0BF0               	decfsz	??_lcd_data,f
   687  075A  2F59               	goto	u97
   688  075B  0BF1               	decfsz	??_lcd_data+1,f
   689  075C  2F59               	goto	u97
   690  075D  0000               	nop
   691  075E                     l661:
   692                           
   693                           ;main.c: 57: RB5=0;
   694  075E  1283               	bcf	3,5	;RP0=0, select bank0
   695  075F  1303               	bcf	3,6	;RP1=0, select bank0
   696  0760  1286               	bcf	6,5	;volatile
   697                           
   698                           ;main.c: 58: _delay((unsigned long)((10)*(20000000/4000.0)));
   699  0761  3041               	movlw	65
   700  0762  00F1               	movwf	??_lcd_data+1
   701  0763  30EE               	movlw	238
   702  0764  00F0               	movwf	??_lcd_data
   703  0765                     u107:
   704  0765  0BF0               	decfsz	??_lcd_data,f
   705  0766  2F65               	goto	u107
   706  0767  0BF1               	decfsz	??_lcd_data+1,f
   707  0768  2F65               	goto	u107
   708  0769  0000               	nop
   709  076A                     l41:
   710  076A  0008               	return
   711  076B                     __end_of_lcd_data:
   712                           
   713                           	psect	text4
   714  076B                     __ptext4:	
   715 ;; *************** function _lcd_cursor *****************
   716 ;; Defined at:
   717 ;;		line 74 in file "main.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;  row             1    wreg     unsigned char 
   720 ;;  col             1    3[COMMON] unsigned char 
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  row             1    4[COMMON] unsigned char 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0, pclath, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   732 ;;      Params:         1       0       0       0       0
   733 ;;      Locals:         1       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0
   735 ;;      Totals:         2       0       0       0       0
   736 ;;Total ram usage:        2 bytes
   737 ;; Hardware stack levels used: 1
   738 ;; Hardware stack levels required when called: 1
   739 ;; This function calls:
   740 ;;		_lcd_command
   741 ;; This function is called by:
   742 ;;		_main
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           
   747                           ;psect for function _lcd_cursor
   748  076B                     _lcd_cursor:
   749                           
   750                           ;incstack = 0
   751                           ; Regs used in _lcd_cursor: [wreg+status,2+status,0+pclath+cstack]
   752                           ;lcd_cursor@row stored from wreg
   753  076B  00F4               	movwf	lcd_cursor@row
   754  076C                     l701:
   755                           
   756                           ;main.c: 74: void lcd_cursor(unsigned char row,unsigned char col);main.c: 75: {;main.c: 
      +                          76:  if(row==0){lcd_command(0x80);lcd_command(0x80+col);}
   757  076C  0874               	movf	lcd_cursor@row,w
   758  076D  1D03               	btfss	3,2
   759  076E  2F70               	goto	u41
   760  076F  2F71               	goto	u40
   761  0770                     u41:
   762  0770  2F7E               	goto	l705
   763  0771                     u40:
   764  0771                     l703:
   765  0771  3080               	movlw	128
   766  0772  120A  118A  2731  120A  118A  	fcall	_lcd_command
   767  0777  0873               	movf	lcd_cursor@col,w
   768  0778  3E80               	addlw	128
   769  0779  120A  118A  2731  120A  118A  	fcall	_lcd_command
   770  077E                     l705:
   771                           
   772                           ;main.c: 77:  if(row==1){lcd_command(0xc0);lcd_command(0xc0+col);}
   773  077E  0374               	decf	lcd_cursor@row,w
   774  077F  1D03               	btfss	3,2
   775  0780  2F82               	goto	u51
   776  0781  2F83               	goto	u50
   777  0782                     u51:
   778  0782  2F90               	goto	l55
   779  0783                     u50:
   780  0783                     l707:
   781  0783  30C0               	movlw	192
   782  0784  120A  118A  2731  120A  118A  	fcall	_lcd_command
   783  0789  0873               	movf	lcd_cursor@col,w
   784  078A  3EC0               	addlw	192
   785  078B  120A  118A  2731  120A  118A  	fcall	_lcd_command
   786  0790                     l55:
   787  0790  0008               	return
   788  0791                     __end_of_lcd_cursor:
   789                           
   790                           	psect	text5
   791  0711                     __ptext5:	
   792 ;; *************** function _lcd_clear *****************
   793 ;; Defined at:
   794 ;;		line 70 in file "main.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, status,2, status,0, pclath, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   808 ;;      Params:         0       0       0       0       0
   809 ;;      Locals:         0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0
   811 ;;      Totals:         0       0       0       0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; Hardware stack levels required when called: 1
   815 ;; This function calls:
   816 ;;		_lcd_command
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _lcd_clear
   824  0711                     _lcd_clear:
   825  0711                     l683:	
   826                           ;incstack = 0
   827                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
   828                           
   829                           
   830                           ;main.c: 72:  lcd_command(0x01);
   831  0711  3001               	movlw	1
   832  0712  120A  118A  2731  120A  118A  	fcall	_lcd_command
   833  0717                     l50:
   834  0717  0008               	return
   835  0718                     __end_of_lcd_clear:
   836                           
   837                           	psect	text6
   838  0731                     __ptext6:	
   839 ;; *************** function _lcd_command *****************
   840 ;; Defined at:
   841 ;;		line 42 in file "main.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  com             1    wreg     unsigned char 
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  com             1    2[COMMON] unsigned char 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   855 ;;      Params:         0       0       0       0       0
   856 ;;      Locals:         1       0       0       0       0
   857 ;;      Temps:          2       0       0       0       0
   858 ;;      Totals:         3       0       0       0       0
   859 ;;Total ram usage:        3 bytes
   860 ;; Hardware stack levels used: 1
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		_lcd_init
   865 ;;		_lcd_clear
   866 ;;		_lcd_cursor
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           
   871                           ;psect for function _lcd_command
   872  0731                     _lcd_command:
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _lcd_command: [wreg]
   876                           ;lcd_command@com stored from wreg
   877  0731  00F2               	movwf	lcd_command@com
   878  0732                     l647:
   879                           
   880                           ;main.c: 42: void lcd_command(unsigned char com);main.c: 43: {;main.c: 44: PORTD=com;
   881  0732  0872               	movf	lcd_command@com,w
   882  0733  1283               	bcf	3,5	;RP0=0, select bank0
   883  0734  1303               	bcf	3,6	;RP1=0, select bank0
   884  0735  0088               	movwf	8	;volatile
   885  0736                     l649:
   886                           
   887                           ;main.c: 45: RB4=0;
   888  0736  1206               	bcf	6,4	;volatile
   889  0737                     l651:
   890                           
   891                           ;main.c: 46: RB5=1;
   892  0737  1686               	bsf	6,5	;volatile
   893                           
   894                           ;main.c: 47: _delay((unsigned long)((10)*(20000000/4000.0)));
   895  0738  3041               	movlw	65
   896  0739  00F1               	movwf	??_lcd_command+1
   897  073A  30EE               	movlw	238
   898  073B  00F0               	movwf	??_lcd_command
   899  073C                     u117:
   900  073C  0BF0               	decfsz	??_lcd_command,f
   901  073D  2F3C               	goto	u117
   902  073E  0BF1               	decfsz	??_lcd_command+1,f
   903  073F  2F3C               	goto	u117
   904  0740  0000               	nop
   905  0741                     l653:
   906                           
   907                           ;main.c: 48: RB5=0;
   908  0741  1283               	bcf	3,5	;RP0=0, select bank0
   909  0742  1303               	bcf	3,6	;RP1=0, select bank0
   910  0743  1286               	bcf	6,5	;volatile
   911                           
   912                           ;main.c: 49: _delay((unsigned long)((10)*(20000000/4000.0)));
   913  0744  3041               	movlw	65
   914  0745  00F1               	movwf	??_lcd_command+1
   915  0746  30EE               	movlw	238
   916  0747  00F0               	movwf	??_lcd_command
   917  0748                     u127:
   918  0748  0BF0               	decfsz	??_lcd_command,f
   919  0749  2F48               	goto	u127
   920  074A  0BF1               	decfsz	??_lcd_command+1,f
   921  074B  2F48               	goto	u127
   922  074C  0000               	nop
   923  074D                     l38:
   924  074D  0008               	return
   925  074E                     __end_of_lcd_command:
   926  007E                     btemp	set	126	;btemp
   927  007E                     wtemp0	set	126
   928                           
   929                           	psect	config
   930                           
   931                           ;Config register CONFIG @ 0x2007
   932                           ;	Oscillator Selection bits
   933                           ;	FOSC = HS, HS oscillator
   934                           ;	Watchdog Timer Enable bit
   935                           ;	WDTE = OFF, WDT disabled
   936                           ;	Power-up Timer Enable bit
   937                           ;	PWRTE = OFF, PWRT disabled
   938                           ;	Brown-out Reset Enable bit
   939                           ;	BOREN = ON, BOR enabled
   940                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   941                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   942                           ;	Data EEPROM Memory Code Protection bit
   943                           ;	CPD = OFF, Data EEPROM code protection off
   944                           ;	Flash Program Memory Write Enable bits
   945                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   946                           ;	In-Circuit Debugger Mode bit
   947                           ;	DEBUG = 0x1, unprogrammed default
   948                           ;	Flash Program Memory Code Protection bit
   949                           ;	CP = OFF, Code protection off
   950  2007                     	org	8199
   951  2007  3F7A               	dw	16250

Data Sizes:
    Strings     26
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_display@word	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[11]), STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_lcd_display
    _lcd_init->_lcd_command
    _lcd_display->_lcd_data
    _lcd_cursor->_lcd_command
    _lcd_clear->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     411
                                              6 COMMON     3     3      0
                          _lcd_clear
                         _lcd_cursor
                        _lcd_display
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      15
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_display                                          3     3      0     126
                                              3 COMMON     3     3      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_cursor                                           2     1      1     255
                                              3 COMMON     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0      15
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_clear
     _lcd_command
   _lcd_cursor
     _lcd_command
   _lcd_display
     _lcd_data
   _lcd_init
     _lcd_command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat May 01 19:14:39 2021

                      pc 0002             lcd_data@data 0072                       l41 076A  
                     l50 0717                       l35 0730                       l38 074D  
                     l55 0790                       l47 07B7                       u40 0771  
                     u41 0770                       u50 0783                       u51 0782  
                     u60 07B7                       u61 07B6                       u77 07EC  
                     u87 07A7                       u97 0759                       fsr 0004  
                    l701 076C                      l703 0771                      l711 0793  
                    l705 077E                      l713 079F                      l721 07C4  
                    l651 0737                      l707 0783                      l715 07A3  
                    l731 07E6                      l723 07C9                      l653 0741  
                    l661 075E                      l717 07AB                      l709 0792  
                    l733 07F3                      l725 07D0                      l647 0732  
                    l655 074F                      l663 0718                      l727 07D6  
                    l719 07B8                      l649 0736                      l657 0753  
                    l729 07E0                      l683 0711                      l659 0754  
                    _RB4 0034                      _RB5 0035                      u107 0765  
                    u117 073C                      u127 0748                      fsr0 0004  
                   STR_1 0009                     STR_2 0018                     _main 07B8  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _PORTB 0006                    _PORTD 0008                    _TRISB 0086  
                  _TRISD 0088                    pclath 000A                    status 0003  
                  wtemp0 007E            lcd_cursor@col 0073            lcd_cursor@row 0074  
        __initialization 07FC             __end_of_main 07FC                   ??_main 0076  
         lcd_command@com 0072         __end_of_lcd_data 076B         __end_of_lcd_init 0731  
   __size_of_lcd_command 001D     __size_of_lcd_display 0027  __end_of__initialization 07FC  
         __pcstackCOMMON 0070       __size_of_lcd_clear 0007               __pmaintext 07B8  
        lcd_display@word 0075               _lcd_cursor 076B                ?_lcd_data 0070  
              ?_lcd_init 0070               __stringtab 0003        __end_of_lcd_clear 0718  
                __ptext1 0718                  __ptext2 0791                  __ptext3 074E  
                __ptext4 076B                  __ptext5 0711                  __ptext6 0731  
             ??_lcd_data 0070               ??_lcd_init 0073     end_of_initialization 07FC  
            ?_lcd_cursor 0073            ??_lcd_command 0070            ??_lcd_display 0073  
    start_initialization 07FC      __size_of_lcd_cursor 0026      __end_of_lcd_command 074E  
    __end_of_lcd_display 07B8                ___latbits 0002        __size_of_lcd_data 001D  
      __size_of_lcd_init 0019                _lcd_clear 0711                __pstrings 0003  
            _lcd_command 0731              _lcd_display 0791               ?_lcd_clear 0070  
            __stringbase 0008             ??_lcd_cursor 0074       __end_of_lcd_cursor 0791  
     __end_of__stringtab 0009                 _lcd_data 074E                 _lcd_init 0718  
          __size_of_main 0044              ??_lcd_clear 0073                stringcode 0003  
               stringdir 0003                 stringtab 0003             ?_lcd_command 0070  
           ?_lcd_display 0070  
